#!/usr/bin/python3
import os, rclpy
from rclpy.node import Node
from std_msgs.msg import String
def main():
    monitor= Basic()
    monitor.process()

class Basic():
    running= [ " ", " ", "▖", "▖", "▌", "▛", "█", "▜", "▐", "▐", "▗", "▗" ]
    runlen= len( running )

    def __init__(self):
        self._i= 0
        self._pulses= {}

    def monitor_callback(self):
        os.system('clear')
        print( "Pulse Monitor: ")
        self._i= (self._i+1)%Basic.runlen
        for p in self._pulses :
            pulse_str= ""
            for i in range(len(p), 12) :
                pulse_str+= " "
            pulse_str+= p + ": "
            
            pulse_str+= self._pulses[p][0] + " "
            for i in range(self._pulses[p][1]) :
                pulse_str+= "⦁"
            print( pulse_str )
        print( Basic.running[self._i] )
        print( "" )
        print( "" )
        print( "" )
 
    def pulse_callback(self, msg):
        pulse= msg.data.split(": ")
        if pulse[0] in self._pulses :
            self._pulses[ pulse[0] ][0]= pulse[1]
            self._pulses[ pulse[0] ][1]= (self._pulses[ pulse[0] ][1]+1)%4
        else :
            self._pulses[ pulse[0] ]= [ pulse[1], 0]

    def process(self):
        # Ros initialization
        rclpy.init(domain_id= 100)
        node = Node( f"pulse_monitor" )
        self._timer = node.create_timer( 0.05, self.monitor_callback )
        node.create_subscription( String, "pulse", self.pulse_callback, 10 )
        # Infinite loop:
        rclpy.spin(node)

        # Clean stop:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()