#!/usr/bin/python3
import os, rclpy
from rclpy.node import Node
from basic_msgs.msg import Pulse
def main():
    monitor= Basic()
    monitor.process()

def fixRightStr( aStr, aSize, sep=" " ):
    fix= ""
    for i in range(len(aStr), aSize) :
        fix+= sep
    return fix+ aStr

def fixLeftStr( aStr, aSize, sep=" " ):
    fix= ""
    for i in range(len(aStr), aSize) :
        fix+= sep
    return aStr + fix

class Parasit():
    def __init__(self, status, deltaStamp) -> None:
        self._pulse= "––––––––⥍"
        self._status= status
        self._time= deltaStamp

    def update(self, status, deltaStamp) -> None:
        self._pulse= self._pulse[1:] + "⥍"
        self._status= status
        self._time= (int)(0.8*self._time + 0.2*deltaStamp)

    def step(self):
        self._pulse=  self._pulse[1:] + "–"

class Basic():
    running= [ " ", " ", "▖", "▖", "▌", "▛", "█", "▜", "▐", "▐", "▗", "▗" ]
    runlen= len( running )

    def __init__(self):
        self._i= 0
        self._pulses= {}

    def get_stamp(self):
        return self._node.get_clock().now().to_msg()
    
    def monitor_callback(self):
        os.system('clear')
        print( Basic.running[self._i]+" Pulse Monitor: ")
        self._i= (self._i+1)%Basic.runlen
        for name in self._pulses :
            pulse= self._pulses[name]
            pulse_str= fixRightStr( name, 14 )
            pulse_str+= ": "
            pulse_str+= pulse._pulse + " " 
            pulse_str+= fixLeftStr( pulse._status+" ", 36, "." )

            synchro= pulse._time
            pulse_str+= fixRightStr( f" ({synchro} ms)", 16, "." )
            print(pulse_str)
            
            # animate pulse:
            if self._i%3 == 0 :
                pulse.step()
        
    def pulse_callback(self, pulse_msg):
        time= self.get_stamp()
        delta= (time.sec - pulse_msg.stamp.sec) * 1000 + (time.nanosec - pulse_msg.stamp.nanosec) // 1000000
        organism= pulse_msg.system_name
        status= pulse_msg.description
        if organism in self._pulses :
            self._pulses[organism].update( status, delta )
        else :
            self._pulses[organism]= Parasit( status, delta )

    def process(self):
        # Ros initialization
        rclpy.init(domain_id= 100)
        self._node = Node( f"pulse_monitor" )
        self._timer = self._node.create_timer( 0.05, self.monitor_callback )
        self._node.create_subscription( Pulse, "pulse", self.pulse_callback, 10 )
        # Infinite loop:
        rclpy.spin(self._node)

        # Clean stop:
        self._node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()