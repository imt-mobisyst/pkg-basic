#!/usr/bin/python3
import os, rclpy
from rclpy.node import Node
from basic_msgs.msg import Pulse
def main():
    monitor= Basic()
    monitor.process()

class Basic():
    running= [ " ", " ", "▖", "▖", "▌", "▛", "█", "▜", "▐", "▐", "▗", "▗" ]
    runlen= len( running )

    def __init__(self):
        self._i= 0
        self._pulses= {}

    def get_stamp(self):
        return self._node.get_clock().now().to_msg()
    
    def monitor_callback(self):
        os.system('clear')
        print( Basic.running[self._i]+" Pulse Monitor: ")
        self._i= (self._i+1)%Basic.runlen
        for p in self._pulses :
            pulse_str= ""
            for i in range(len(p), 12) :
                pulse_str+= " "
            pulse_str+= p + ": "
            
            pulse_str+= self._pulses[p][1] + "    " + self._pulses[p][0]
            if self._i%3 == 0 :
                self._pulses[p][1]= self._pulses[p][1][1:] + "–"

            synchro= self._pulses[p][2]
            pulse_str+= f"    ({synchro} μs)"
            print(pulse_str)
        
    def pulse_callback(self, pulse_msg):
        time= self.get_stamp()
        delta= (time.sec - pulse_msg.stamp.sec) * 1000 + (time.nanosec - pulse_msg.stamp.nanosec) // 1000
        organism= pulse_msg.system_name
        status= pulse_msg.description
        if organism in self._pulses :
            self._pulses[organism][0]= status
            self._pulses[organism][1]= self._pulses[organism][1][:-1]+"⥍"
            self._pulses[organism][2]= (int)(0.8*self._pulses[organism][2] + 0.2*delta)
        else :
            self._pulses[organism]= [ status, "––––––––⥍", delta]

    def process(self):
        # Ros initialization
        rclpy.init(domain_id= 100)
        self._node = Node( f"pulse_monitor" )
        self._timer = self._node.create_timer( 0.05, self.monitor_callback )
        self._node.create_subscription( Pulse, "pulse", self.pulse_callback, 10 )
        # Infinite loop:
        rclpy.spin(self._node)

        # Clean stop:
        self._node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()