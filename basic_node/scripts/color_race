#!/usr/bin/python3
import os, sys, rclpy, random
from rclpy.node import Node
from std_msgs.msg import String, ColorRGBA
from visualization_msgs.msg import Marker

colorPanel={
    "blue":ColorRGBA(), "red":ColorRGBA(), "green":ColorRGBA(), "yellow":ColorRGBA()
}

colorPanel["blue"].b=1.0
colorPanel["blue"].a=1.0

colorPanel["red"].r=1.0
colorPanel["red"].a=1.0

colorPanel["green"].g=1.0
colorPanel["green"].a=1.0

colorPanel["yellow"].r=1.0
colorPanel["yellow"].g=1.0
colorPanel["yellow"].a=1.0

def main():
    cman= ColorManager()
    cman.process()

class ColorManager():
    def __init__(self, colors= ["blue", "red", "green", "yellow"] ):
        self._colors= colors
        self._counter= 0
        self._target= random.choice( self._colors )
        print( f"> target: {self._target} ({self._counter})" )
        
    def color_callback(self, aMsg):
        print( f"< find: {aMsg.data}" )
        if aMsg.data == self._target :
            while  aMsg.data == self._target :
                self._target= random.choice( self._colors )
            self._counter+= 1
            print( f"> target: {self._target} ({self._counter})" )

        marker= Marker()

        marker.header.frame_id= "base_link"                        # header for time/frame information
        marker.ns= "color"                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
        marker.id= 0                           # object ID useful in conjunction with the namespace for manipulating and deleting the object later
        marker.type= 3 #CYLINDER                         # Type of object
        #marker.pose
        marker.scale.x= 0.4
        marker.scale.y= 0.4
        marker.scale.z= 0.1
        marker.color= colorPanel[self._target]
        #duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
        #bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

        self._markerPub.publish(marker)

    def process(self):
        # Ros double initialization
        rclpy.init()
        self._node = Node( f"color_manager" )
        self._node.create_subscription( String, "color/status", self.color_callback, 10 )
        self._markerPub= self._node.create_publisher( Marker, "color/markers", 10 )

        # Infinite loop:
        rclpy.spin(self._node)

        # Clean stop:
        self._node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    print(sys.argv)
    main()