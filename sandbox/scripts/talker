#!/usr/bin/python3
# --- ROS ---
import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from rclpy.signals import SignalHandlerOptions

# --- Standard ---
import signal

# --- --- ---

# Interruption callback
interrupted= False
def signalInteruption(signum, frame):
    global interrupted
    print( "\nInterruption..." )
    rclpy.shutdown()
    interrupted= True

# Main function to process
def infiniteTalk():
    global interrupteds

    # Initialize ROS node with ROS client
    rclpy.init( signal_handler_options= SignalHandlerOptions.NO )
    rosNode= Node( "infTalker" )
    talker= ROSTalker()
    talker.initializeROSNode(rosNode)

    # Capture Crt-C event
    signal.signal(signal.SIGINT, signalInteruption)

    # Start infinite loop
    rclpy.spin(rosNode)

    # Clean everything and switch the light off
    rosNode.destroy_node()
    if not interrupted :
        rclpy.shutdown()

# Ressources
class ROSTalker:

    def initializeROSNode(self, rosNode):
        self._publisher= rosNode.create_publisher( String, 'blabla', 10 )
        self._timer = rosNode.create_timer(0.5, self.timer_callback)
        self._i = 0

    def timer_callback(self):
        msg = String()
        msg.data = 'Hello World: %d' % self._i
        self._publisher.publish(msg)
        self._i += 1

# Execute the main function.
if __name__ == "__main__":
    infiniteTalk()
